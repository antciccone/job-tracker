c
!
exit
params
exit
@comment.job = (params[:job_id])
params
@comment.job 
@comment.job
params
@comment
exit
@comment.job.create(paramsexit
@comment.job
@comment.jobs
params
@comment
exit
!!!
    job.tags.create(title: "Software")
exit
tag
job.tags
job
c
exit
@category.jobs.pluck(:title)
@company.jobs.pluck(:title)
@category.    jobs.pluck(:title).join
 @category.format_array
@category
c
!!!
quit
@company.joins(:jobs).count
@company.joins(:jobs)
@company.join(:jobs)
@company.first.jobs.count
@company.first.jobs
@company.jobs
@company
exit
@company.first.jobs.count
@company.first.jobs
@company.jobs
@company
c
x
!!!
rspec
contact.company.id
contact.company
contact.full_name
contact
exit
@companies
exit
@compae
exit
@job_all
job_all
exit
params[:location]
params
@company
company
exit
params.keysexit
params.keys
params.values
params.values.include?("location")
params
exit
params
exit
params.values
params
exit
!!!
id
Job.find(8)
exit
hash
exit
Job.find(id).title
Job.find(id).totle
Job.find(id)
hash
exit
Job.find_by(title: Job.find(average).title).title
Job.find_by(title: Job.find_by(title: average.title).title)
Job.find_by(title: Job.find_by(title: average.title).title
Job.find_by(title: Job.find(average).title).title
Job.find_by(title: Job.find(average).title)
Job.find_by(title: Job.find(average.title))
Job.find_by(title: Job.find(average)).title
Job.find_by(title: Job.find(average).title
Job.find_by(title: Job.find(average).title)
Job.find(average).title
Job.find(avereage).title
average.title
Job.find_by(title: average.title
Job.find_by(title: average.title)
Job.find_by(title,average.title)
Job.find(average)
id
exit
c
ecit
Job.find(value)
value
Job.find_by(title: value.name)
Job.find_by(title: value.title)
array << key.to_s + "=>" Job.find_by(title: value.title)
array << key
key
c
 Job.group(:level_of_interest).count
   68:     Job.group(:level_of_interest).count
exit
@job
c
params.include?('location')
params.include?('interest')
params.include?(interest)
params
exit
@company
c
@location
c
@location.find_
@location
c
Company.find_by(city: params[:sort])
params[:sort]
Company.find_by(city:  ])
Company.find_by(params[:city])
params
exit
params.values.include?("location")
params.values
params
params.include?([:sort])
params.include?([:sort][:location])
params.include?("location")
params
c
params
c
params.unclude
params
c
@location.jobs
@location
    @location = Company.find_by(params[:city])
params
c
params
@location
c
params.include?("sort")
params.include?([:sort])
params.inlcude?([:sort])
params.inlcude([:sort])
params.include
params.include?(sort)
params
exit
!!!
params
exit
params
exit
params
exit
params
exit
eit
exit
params[:sort]
params
    @companies = Company.all.order(params[:sort]).all
    @companies = Company.all.order(params[:sort])
@companies
companies
exit
@company
exit
a = sumed.sort_by {|k,v| v}.reverse[0..2]
a[0..2]
a[0]
a
a = sumed.sort_by {|k,v| v}.reverse
a = sumed.sort_by {|k,v| v}
a = sumed.sort_by {|k,v| v|
sumed
exit
apple.sort_by
apple
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort_by {|k,v| v}.reverse.[0..2]
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort_by {|k,v| v}.reverse
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort_by {|k,v| v}.reverse.flatten
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort_by {|k,v| v}.reverse
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort_by {|k,v| v}
[[6, "62.29"], [4, "56.0"], [5, "69.7"], [8, "50.6"], [1, "54.67"], [2, "70.9"], [3, "41.2"], [7, "35.7"]].sort
{6=>"62.29", 4=>"56.0", 5=>"69.7", 8=>"50.6", 1=>"54.67", 2=>"70.9", 3=>"41.2", 7=>"35.7"}.to
{6=>"62.29", 4=>"56.0", 5=>"69.7", 8=>"50.6", 1=>"54.67", 2=>"70.9", 3=>"41.2", 7=>"35.7"}.to_a
apple
exit
!!!
apple
exit
!!!
apple.sort.reverse[0..2]
apple.sort.reverse
apple.sort
apple
exit
top_three_companies_ranked_by_ever_level_of_interest
exit
array
exit
b
exit
average_interest.to_f.round(2)
average_interest.to_f
average_interest
Company.find(company_id)
exit
k
a
    a.sort_by {|k,v| v.to_f}
    a.sort_by {|k,v| v}
    a = Job.group(:company_id).average(:level_of_interest).to_f
a
    a.sort_by {|k,v| v}
    a = Job.group(:company_id).average(:level_of_interest)
exit
Job.group(:company_id).average(:level_of_interest)
exit
Job.where(company_id: k)
Job.where(company_id: k).count.average(level_of_interest)
Job.where(company_id: k).count
Job.where(company_id: k)
value
Job.group(:company_id).count
Job.find(k)
k
Job.where(company_id: k).count
k
value
exit
v.count
v
k
